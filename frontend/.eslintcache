[{"/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/index.js":"1","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/reportWebVitals.js":"2","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/App.js":"3","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Router.js":"4","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/NavBar.js":"5","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Register.js":"6","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Setup.js":"7","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Login.js":"8","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Reel.js":"9","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Settings.js":"10","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/SavedMovies.js":"11","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/MovieCard.js":"12","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/RatedMovies.js":"13","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/MovieCard_Rated.js":"14"},{"size":500,"mtime":1611359074562,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1611359074612,"results":"17","hashOfConfig":"16"},{"size":310,"mtime":1611494376746,"results":"18","hashOfConfig":"16"},{"size":829,"mtime":1618009264025,"results":"19","hashOfConfig":"16"},{"size":1294,"mtime":1618009253697,"results":"20","hashOfConfig":"16"},{"size":6682,"mtime":1611705827789,"results":"21","hashOfConfig":"16"},{"size":7136,"mtime":1616003579825,"results":"22","hashOfConfig":"16"},{"size":6067,"mtime":1615839378504,"results":"23","hashOfConfig":"16"},{"size":6214,"mtime":1616289329479,"results":"24","hashOfConfig":"16"},{"size":7147,"mtime":1616013125399,"results":"25","hashOfConfig":"16"},{"size":1690,"mtime":1617912724709,"results":"26","hashOfConfig":"16"},{"size":1865,"mtime":1617834955672,"results":"27","hashOfConfig":"16"},{"size":1426,"mtime":1618008366987,"results":"28","hashOfConfig":"16"},{"size":580,"mtime":1618009571753,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"aqq92v",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},"/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/index.js",[],["69","70"],"/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/reportWebVitals.js",[],"/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/App.js",[],"/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Router.js",[],"/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/NavBar.js",["71"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  }\r\n}));\r\n\r\nconst NavBar = () => {\r\n\r\n  const [token, setToken] = useState(sessionStorage.getItem(\"token\") || \"\");\r\n\r\n  useEffect( () => {\r\n    setToken(sessionStorage.getItem(\"token\") || \"\");\r\n    console.log(token)\r\n  }, [token])\r\n\r\n  console.log(\"Token\", token)\r\n\r\n  return (\r\n    <nav style={{textAlign: \"center\"}}>\r\n      {!token && (<Button color=\"inherit\" component={Link} to={'/login'}>Login</Button>)}\r\n      {!token && (<Button color=\"inherit\" component={Link} to={'/register'}>Register</Button>)}\r\n      {token && (<Button color=\"inherit\" component={Link} to={'/setup'}>Setup</Button>)}\r\n      {token && (<Button color=\"inherit\" component={Link} to={'/reel'}>Reel</Button>)}\r\n      {token && (<Button color=\"inherit\" component={Link} to={'/saved'}>Saved Movies</Button>)}\r\n      {token && (<Button color=\"inherit\" component={Link} to={'rated'}>Rated Movies</Button>)}\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default NavBar;","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Register.js",["72","73"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n//implement useEffect that redirects if user is already logged in\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst useStateWithSessionStorage = (key) => {\r\n  const [data, setData] = useState(sessionStorage.getItem(key) || \"\");\r\n  return [data, setData]\r\n}\r\n\r\nexport default function Register() {\r\n\r\n  const [first, setFirst] = useState(\"\");\r\n  const [last, setLast] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(false);\r\n\r\n  const [requestSuccess, setRequestSuccess] = useState(true);\r\n  const [alreadyExists, setAlreadyExists] = useState(false);\r\n\r\n  const [token, setToken] = useStateWithSessionStorage('token')\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    async function redirect() {\r\n      console.log(token)\r\n      if (token !== \"\") {\r\n        const data2 = {token: token};\r\n        const configs2 = {\r\n          method: \"POST\",\r\n          mode: \"cors\",\r\n          body: JSON.stringify(data2),\r\n          headers: {\"Content-Type\": \"application/json\"}\r\n        };\r\n        const response_package2 = await fetch(\"http://localhost:8000/api/is_setup/\", configs2)\r\n        const response2 = await response_package2.json()\r\n        console.log(response2)\r\n        if (response2.connected && response2.isSetup) history.push(\"/main\");\r\n        else if (response2.connected) history.push(\"/setup\");\r\n      } \r\n    }\r\n    redirect()\r\n  }, [])\r\n\r\n  const registerUser = async () => {\r\n    if (password !== confirmPassword) {\r\n      setPasswordError(true)\r\n    } else {\r\n      setPasswordError(false)\r\n      const data = {\r\n        first: first,\r\n        last: last,\r\n        email: email,\r\n        password: password\r\n      }\r\n      const configs = {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        body: JSON.stringify(data),\r\n        headers: {\"Content-Type\": \"application/json\"}\r\n      }\r\n      const response_package = await fetch(\"http://localhost:8000/api/add_user/\", configs)\r\n      const response = await response_package.json()\r\n      setRequestSuccess(response.connected);\r\n      if (requestSuccess) {\r\n        if (!response.added) setAlreadyExists(true);\r\n        else {\r\n          setAlreadyExists(false);\r\n          history.push(\"/login\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"First Name\"\r\n                autoFocus\r\n                onChange={e => setFirst(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Last Name\"\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n                onChange={e => setLast(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                onChange={e => setEmail(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                onChange={e => setPassword(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                id=\"confirm-password\"\r\n                onChange={e => setConfirmPassword(e.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={e => {\r\n              e.preventDefault();\r\n              registerUser();\r\n            }}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          {passwordError && <p>Passwords do not match, please try again</p>}\r\n          {!requestSuccess && <p>Connection problem, please try again</p>}\r\n          {alreadyExists && <p>Email taken, please use another email</p>}\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Setup.js",["74","75"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStateWithSessionStorage = (key) => {\r\n  const [data, setData] = useState(sessionStorage.getItem(key) || \"\");\r\n  return [data, setData]\r\n}\r\n\r\nexport default function Setup() {\r\n\r\n  useEffect(() => {\r\n    async function redirect() {\r\n      if (token !== \"\") {\r\n        console.log(token)\r\n        const data2 = {token: token};\r\n        const configs2 = {\r\n          method: \"POST\",\r\n          mode: \"cors\",\r\n          body: JSON.stringify(data2),\r\n          headers: {\"Content-Type\": \"application/json\"}\r\n        };\r\n        const response_package2 = await fetch(\"http://localhost:8000/api/is_setup/\", configs2)\r\n        const response2 = await response_package2.json()\r\n        console.log(response2)\r\n        if (response2.connected && response2.isSetup) history.push(\"/reel\");\r\n        else history.push(\"/setup\");\r\n      } \r\n    }\r\n    redirect()\r\n  }, [])\r\n\r\n  const [action, setAction] = useState(false);\r\n  const [adventure, setAdventure] = useState(false);\r\n  const [animation, setAnimation] = useState(false);\r\n  const [childrens, setChildrens] = useState(false);\r\n  const [comedy, setComedy] = useState(false);\r\n  const [crime, setCrime] = useState(false);\r\n  const [documentary, setDocumentary] = useState(false);\r\n  const [drama, setDrama] = useState(false);\r\n  const [fantasy, setFantasy] = useState(false);\r\n  const [filmNoir, setFilmNoir] = useState(false);\r\n  const [horror, setHorror] = useState(false);\r\n  const [musical, setMusical] = useState(false);\r\n  const [mystery, setMystery] = useState(false);\r\n  const [romance, setRomance] = useState(false);\r\n  const [sciFi, setSciFi] = useState(false);\r\n  const [thriller, setThriller] = useState(false);\r\n  const [war, setWar] = useState(false);\r\n  const [western, setWestern] = useState(false);\r\n\r\n  const [requestSuccess, setRequestSuccess] = useState(true);\r\n\r\n  const [token, setToken] = useStateWithSessionStorage('token');\r\n  const history = useHistory();\r\n\r\n  const setGenres = async () => {\r\n    console.log(\"This\");\r\n\r\n    let genres = [];\r\n\r\n    if (action) genres.push(\"Action\");\r\n    if (adventure) genres.push(\"Adventure\");\r\n    if (animation) genres.push(\"Animation\");\r\n    if (childrens) genres.push(\"Children's\");\r\n    if (comedy) genres.push(\"Comedy\");\r\n    if (crime) genres.push(\"Crime\");\r\n    if (documentary) genres.push(\"Documentary\");\r\n    if (drama) genres.push(\"Drama\");\r\n    if (fantasy) genres.push(\"Fantasy\");\r\n    if (filmNoir) genres.push(\"Film-Noir\");\r\n    if (horror) genres.push(\"Horror\");\r\n    if (musical) genres.push(\"Musical\");\r\n    if (mystery) genres.push(\"Mystery\");\r\n    if (romance) genres.push(\"Romance\");\r\n    if (sciFi) genres.push(\"Sci-Fi\");\r\n    if (thriller) genres.push(\"Thriller\");\r\n    if (war) genres.push(\"War\");\r\n    if (western) genres.push(\"Western\");\r\n\r\n    const data = {\r\n      genres: genres,\r\n      token: token\r\n    }\r\n    const configs = { \r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify(data),\r\n      headers: {\"Content-Type\": \"application/json\"}\r\n    };\r\n    const response_package = await fetch(\"http://localhost:8000/api/add_genres/\", configs);\r\n    const response = await response_package.json();\r\n    setRequestSuccess(response.connected);\r\n    if (requestSuccess) history.push(\"/reel\");\r\n  }\r\n\r\n  return (\r\n    <div style={{justifyContext: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\r\n      <h1 style={{textAlign: \"center\"}}>Select one or more genres for the system to make recommendations from</h1>\r\n      <FormGroup row >\r\n        <FormControlLabel\r\n          control={<Checkbox checked={action} onChange={() => setAction(!action)} name=\"action\" />}\r\n          label=\"Action\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={adventure} onChange={() => setAdventure(!adventure)} name=\"adventure\" />}\r\n          label=\"Adventure\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={animation} onChange={() => setAnimation(!animation)} name=\"animation\" />}\r\n          label=\"Animation\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={childrens} onChange={() => setChildrens(!childrens)} name=\"childrens\" />}\r\n          label=\"Children's\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={comedy} onChange={() => setComedy(!comedy)} name=\"comedy\" />}\r\n          label=\"Comedy\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={crime} onChange={() => setCrime(!crime)} name=\"crime\" />}\r\n          label=\"Crime\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={documentary} onChange={() => setDocumentary(!documentary)} name=\"documentary\" />}\r\n          label=\"Documentary\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={drama} onChange={() => setDrama(!drama)} name=\"drama\" />}\r\n          label=\"Drama\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={fantasy} onChange={() => setFantasy(!fantasy)} name=\"fantasy\" />}\r\n          label=\"Fantasy\"\r\n        />\r\n      </FormGroup>\r\n      <FormGroup row>\r\n      <FormControlLabel\r\n        control={<Checkbox checked={filmNoir} onChange={() => setFilmNoir(!filmNoir)} name=\"filmNoir\" />}\r\n        label=\"Film-Noir\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={horror} onChange={() => setHorror(!horror)} name=\"horror\" />}\r\n        label=\"Horror\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={musical} onChange={() => setMusical(!musical)} name=\"musical\" />}\r\n        label=\"Musical\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={mystery} onChange={() => setMystery(!mystery)} name=\"mystery\" />}\r\n        label=\"Mystery\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={romance} onChange={() => setRomance(!romance)} name=\"romance\" />}\r\n        label=\"Romance\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={sciFi} onChange={() => setSciFi(!sciFi)} name=\"sciFi\" />}\r\n        label=\"Sci-Fi\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={thriller} onChange={() => setThriller(!thriller)} name=\"thriller\" />}\r\n        label=\"Thriller\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={war} onChange={() => setWar(!war)} name=\"war\" />}\r\n        label=\"War\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={western} onChange={() => setWestern(!western)} name=\"western\" />}\r\n        label=\"Western\"\r\n      />\r\n    </FormGroup>\r\n    <Button\r\n      type=\"submit\"\r\n      fullWidth\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={e => {\r\n        e.preventDefault();\r\n        setGenres();\r\n      }}\r\n    >\r\n      Submit\r\n    </Button>\r\n  </div>\r\n    \r\n  )\r\n}","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Login.js",["76","77"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '100vh',\r\n  },\r\n  image: {\r\n    backgroundImage: 'url(https://media.istockphoto.com/photos/movie-projector-on-dark-background-picture-id1007557230?k=6&m=1007557230&s=612x612&w=0&h=2c6NHjfH4sWCgTNoZCDLQx10_PdIfl-dI-nyZ9wF_jI=)',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center',\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst useStateWithSessionStorage = (key) => {\r\n  const [data, setData] = useState(sessionStorage.getItem(key) || \"\");\r\n  return [data, setData]\r\n}\r\n\r\nexport default function Login() {\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [requestSuccess, setRequestSuccess] = useState(true);\r\n  const [loginError, setLoginError] = useState(false);\r\n\r\n  const [token, setToken] = useStateWithSessionStorage('token')\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    async function redirect() {\r\n      if (token !== \"\") {\r\n        console.log(token)\r\n        const data2 = {token: token};\r\n        const configs2 = {\r\n          method: \"POST\",\r\n          mode: \"cors\",\r\n          body: JSON.stringify(data2),\r\n          headers: {\"Content-Type\": \"application/json\"}\r\n        };\r\n        const response_package2 = await fetch(\"http://localhost:8000/api/is_setup/\", configs2)\r\n        const response2 = await response_package2.json()\r\n        console.log(response2)\r\n        if (response2.connected && response2.isSetup) history.push(\"/main\");\r\n        else if (response2.connected) history.push(\"/setup\");\r\n      } \r\n    }\r\n    redirect()\r\n  }, [])\r\n\r\n  const loginUser = async () => {\r\n    const data = {\r\n      email: email,\r\n      password: password\r\n    };\r\n    const configs = { \r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify(data),\r\n      headers: {\"Content-Type\": \"application/json\"}\r\n    };\r\n    const response_package = await fetch(\"http://localhost:8000/api/login_user/\", configs);\r\n    const response = await response_package.json();\r\n    setRequestSuccess(response.connected);\r\n    if (requestSuccess) {\r\n      if (!response.loggedIn) setLoginError(true);\r\n      else {\r\n        console.log(response.token)\r\n        setLoginError(false);\r\n        sessionStorage.setItem(\"token\", response.token)\r\n        history.push(\"/setup\");\r\n      }\r\n    }\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Log In\r\n          </Typography>\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              onChange={e => setEmail(e.target.value)}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange={e => setPassword(e.target.value)}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                loginUser();\r\n              }}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            {!requestSuccess && <p>Connection problem, please try again</p>}\r\n            {loginError && <p>Email or password is incorrect, please try again</p>}\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link href=\"/register\" variant=\"body2\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Reel.js",["78","79","80","81","82","83","84"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStateWithSessionStorage = (key) => {\r\n  const [data, setData] = useState(sessionStorage.getItem(key) || \"\");\r\n  return [data, setData]\r\n}\r\n\r\nexport default function Reel() {\r\n\r\n  const [token, setToken] = useState(sessionStorage.getItem(\"token\") || \"\");\r\n\r\n  const [movieSet, setMovieSet] = useState([]);\r\n  const [currentMovie, setCurrentMovie] = useState(null);\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\")\r\n  const [runningTime, setRunningTime] = useState(\"\");\r\n  const [year, setYear] = useState(0);\r\n  const [certificate, setCertificate] = useState(\"\");\r\n  const [rating, setRating] = useState(\"\");\r\n  const [genres, setGtenres] = useState([]);\r\n  const [releaseDate, setReleaseDate] = useState(\"\");\r\n  const [plotOutline, setPlotOutline] = useState(\"\");\r\n  const [unformattedTitle, setUnformattedTitle] = useState(\"\");\r\n\r\n  const [userRating, setUserRating] = useState(null)\r\n  const [ratingTotal, setRatingTotal] = useState(0)\r\n  const [numberOfMovies, setNumberOfMovies] = useState(0)\r\n  const [averageRating, setAverageRating] = useState(null)\r\n\r\n  const [discardQueue, setDiscardQueue] = useState([])\r\n\r\n  const addRating = async() => {\r\n    // Sends rating to backend\r\n    if (userRating) {\r\n      let ratingSent = false;\r\n\r\n      while (!ratingSent) {\r\n        const data = {\r\n          token: token,\r\n          movieTitle: unformattedTitle,\r\n          rating: userRating,\r\n          timestamp: Math.round((new Date()).getTime() / 1000)\r\n        };\r\n        const configs = {\r\n          method: \"POST\",\r\n          mode: \"cors\",\r\n          body: JSON.stringify(data),\r\n          headers: {\"Content-Type\": \"application/json\"}\r\n        };\r\n        const response_package = await fetch(\"http://localhost:8000/api/add_rating/\", configs);\r\n        const response = await response_package.json();\r\n        if (response.connected && response.rated) ratingSent = true;\r\n      }\r\n      nextMovie();\r\n    }\r\n\r\n    // Updates average rating\r\n    \r\n    setRatingTotal(ratingTotal + userRating)\r\n    setNumberOfMovies(numberOfMovies + 1)\r\n    setAverageRating(ratingTotal / numberOfMovies)\r\n  }\r\n\r\n  const saveMovie = async () => {\r\n    const data = {\r\n      token: token,\r\n      movie: currentMovie\r\n    };\r\n    const configs = {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify(data),\r\n      headers: {\"Content-Type\": \"application/json\"}\r\n    };\r\n    const response_package = await fetch(\"http://localhost:8000/api/save_movie/\", configs);\r\n    const response = await response_package.json();\r\n    if (!response.connected) saveMovie();\r\n    nextMovie();\r\n  }\r\n\r\n  const nextMovie = async () => {\r\n    let queue = movieSet\r\n\r\n    // Refreshes movieSet if user doesn't like the movies well enough\r\n    if (numberOfMovies > 5 && averageRating < 3) {\r\n      setDiscardQueue(discardQueue.concat(queue));\r\n      const data = {\r\n        token: token,\r\n        movieTitle: null,\r\n        discardQueue: discardQueue,\r\n        getFlag: true,\r\n        refreshFlag: true\r\n      };\r\n      const configs = {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        body: JSON.stringify(data),\r\n        headers: {\"Content-Type\": \"application/json\"}\r\n      };\r\n      const response_package = await fetch(\"http://localhost:8000/api/view_movies/\", configs);\r\n      const response = await response_package.json();\r\n      setRatingTotal(0);\r\n      setNumberOfMovies(0);\r\n      setAverageRating(0);\r\n      if (response.connected) {\r\n        queue = response.data\r\n        setDiscardQueue([]);\r\n      }\r\n    }\r\n    \r\n    console.log(movieSet)\r\n    // Refreshes movieSet if movies have run out\r\n    if (movieSet == null || movieSet.length == 0) {\r\n      console.log(\"Starting\")\r\n      const data2 = {\r\n        token: token,\r\n        movieTitle: averageRating > 5 ? unformattedTitle : null,\r\n        discardQueue: discardQueue,\r\n        refreshFlag: averageRating > 5 ? false : true\r\n      };\r\n      const configs2 = {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        body: JSON.stringify(data2),\r\n        headers: {\"Content-Type\": \"application/json\"}\r\n      };\r\n      const response_package2 = await fetch(\"http://localhost:8000/api/view_movies/\", configs2);\r\n      const response2 = await response_package2.json();\r\n      setRatingTotal(0);\r\n      setNumberOfMovies(0);\r\n      setAverageRating(0);\r\n      if (response2.connected == true) {\r\n        queue = response2.data\r\n        setDiscardQueue([]);\r\n      }\r\n    }\r\n    // Takes from movieSet\r\n    const currentFilm = queue[0];\r\n    setCurrentMovie(currentFilm);\r\n    queue.shift();\r\n    setMovieSet(queue);\r\n\r\n    // Sets movie parameters\r\n    setTitle(currentFilm['title']['title']);\r\n    setImageURL(currentFilm['title']['image']['url']);\r\n    setRunningTime(currentFilm['title']['runningTimeInMinutes']);\r\n    setYear(currentFilm['title']['year']);\r\n    setCertificate(currentFilm[\"certificates\"][\"US\"][0][\"certificate\"]);\r\n    setRating(currentFilm['ratings']['rating']);\r\n    setGtenres(currentFilm['genres']);\r\n    setReleaseDate(currentFilm['releaseDate'])\r\n    setPlotOutline(currentFilm['plotOutline']['text'])\r\n    setUnformattedTitle(currentFilm['unformattedTitle'])\r\n\r\n    console.log()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>The Reel</h1>\r\n      <img\r\n       src={imageURL}\r\n       alt={title}\r\n       />\r\n      <h2>{title} {year} {rating}</h2>\r\n      <h3>{certificate} {runningTime}</h3>\r\n      <h3>{genres} {releaseDate}</h3>\r\n      <h3>{plotOutline}</h3>\r\n       <button onClick={e => nextMovie()}>Next Movie</button>\r\n       <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n        <Rating name=\"customized-10\" defaultValue={2} precision={0.5} max={10} \r\n          value={userRating}\r\n          onChange={(event, newValue) => {\r\n          setUserRating(newValue);}}/>\r\n      </Box>\r\n      <button onClick={e => addRating()}>Add Rating</button>\r\n      <button onClick={e => saveMovie()}>Save Movie</button>\r\n    </div>\r\n  )\r\n\r\n}","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/Settings.js",["85","86"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStateWithSessionStorage = (key) => {\r\n  const [data, setData] = useState(sessionStorage.getItem(key) || \"\");\r\n  return [data, setData]\r\n}\r\n\r\nexport default function Settings() {\r\n\r\n  useEffect(() => {\r\n    async function redirect() {\r\n      if (token !== \"\") {\r\n        console.log(token)\r\n        const data2 = {token: token};\r\n        const configs2 = {\r\n          method: \"POST\",\r\n          mode: \"cors\",\r\n          body: JSON.stringify(data2),\r\n          headers: {\"Content-Type\": \"application/json\"}\r\n        };\r\n        const response_package2 = await fetch(\"http://localhost:8000/api/is_setup/\", configs2)\r\n        const response2 = await response_package2.json()\r\n        console.log(response2)\r\n        if (response2.connected && !response2.isSetup) history.push(\"/setup\");\r\n        else history.push(\"/settings\");\r\n      } \r\n    }\r\n    redirect()\r\n  }, [])\r\n\r\n  const [action, setAction] = useState(false);\r\n  const [adventure, setAdventure] = useState(false);\r\n  const [animation, setAnimation] = useState(false);\r\n  const [childrens, setChildrens] = useState(false);\r\n  const [comedy, setComedy] = useState(false);\r\n  const [crime, setCrime] = useState(false);\r\n  const [documentary, setDocumentary] = useState(false);\r\n  const [drama, setDrama] = useState(false);\r\n  const [fantasy, setFantasy] = useState(false);\r\n  const [filmNoir, setFilmNoir] = useState(false);\r\n  const [horror, setHorror] = useState(false);\r\n  const [musical, setMusical] = useState(false);\r\n  const [mystery, setMystery] = useState(false);\r\n  const [romance, setRomance] = useState(false);\r\n  const [sciFi, setSciFi] = useState(false);\r\n  const [thriller, setThriller] = useState(false);\r\n  const [war, setWar] = useState(false);\r\n  const [western, setWestern] = useState(false);\r\n\r\n  const [requestSuccess, setRequestSuccess] = useState(true);\r\n\r\n  const [token, setToken] = useStateWithSessionStorage('token');\r\n  const history = useHistory();\r\n\r\n  const setGenres = async () => {\r\n    console.log(\"This\");\r\n\r\n    let genres = [];\r\n\r\n    if (action) genres.push(\"Action\");\r\n    if (adventure) genres.push(\"Adventure\");\r\n    if (animation) genres.push(\"Animation\");\r\n    if (childrens) genres.push(\"Children's\");\r\n    if (comedy) genres.push(\"Comedy\");\r\n    if (crime) genres.push(\"Crime\");\r\n    if (documentary) genres.push(\"Documentary\");\r\n    if (drama) genres.push(\"Drama\");\r\n    if (fantasy) genres.push(\"Fantasy\");\r\n    if (filmNoir) genres.push(\"Film-Noir\");\r\n    if (horror) genres.push(\"Horror\");\r\n    if (musical) genres.push(\"Musical\");\r\n    if (mystery) genres.push(\"Mystery\");\r\n    if (romance) genres.push(\"Romance\");\r\n    if (sciFi) genres.push(\"Sci-Fi\");\r\n    if (thriller) genres.push(\"Thriller\");\r\n    if (war) genres.push(\"War\");\r\n    if (western) genres.push(\"Western\");\r\n\r\n    const data = {\r\n      genres: genres,\r\n      token: token\r\n    }\r\n    const configs = { \r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify(data),\r\n      headers: {\"Content-Type\": \"application/json\"}\r\n    };\r\n    const response_package = await fetch(\"http://localhost:8000/api/update_genres/\", configs);\r\n    const response = await response_package.json();\r\n    setRequestSuccess(response.connected);\r\n    if (requestSuccess) history.push(\"/reel\");\r\n  }\r\n\r\n  return (\r\n    <div style={{justifyContext: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\r\n      <h1 style={{textAlign: \"center\"}}>Select one or more genres for the system to make recommendations from</h1>\r\n      <FormGroup row >\r\n        <FormControlLabel\r\n          control={<Checkbox checked={action} onChange={() => setAction(!action)} name=\"action\" />}\r\n          label=\"Action\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={adventure} onChange={() => setAdventure(!adventure)} name=\"adventure\" />}\r\n          label=\"Adventure\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={animation} onChange={() => setAnimation(!animation)} name=\"animation\" />}\r\n          label=\"Animation\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={childrens} onChange={() => setChildrens(!childrens)} name=\"childrens\" />}\r\n          label=\"Children's\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={comedy} onChange={() => setComedy(!comedy)} name=\"comedy\" />}\r\n          label=\"Comedy\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={crime} onChange={() => setCrime(!crime)} name=\"crime\" />}\r\n          label=\"Crime\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={documentary} onChange={() => setDocumentary(!documentary)} name=\"documentary\" />}\r\n          label=\"Documentary\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={drama} onChange={() => setDrama(!drama)} name=\"drama\" />}\r\n          label=\"Drama\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Checkbox checked={fantasy} onChange={() => setFantasy(!fantasy)} name=\"fantasy\" />}\r\n          label=\"Fantasy\"\r\n        />\r\n      </FormGroup>\r\n      <FormGroup row>\r\n      <FormControlLabel\r\n        control={<Checkbox checked={filmNoir} onChange={() => setFilmNoir(!filmNoir)} name=\"filmNoir\" />}\r\n        label=\"Film-Noir\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={horror} onChange={() => setHorror(!horror)} name=\"horror\" />}\r\n        label=\"Horror\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={musical} onChange={() => setMusical(!musical)} name=\"musical\" />}\r\n        label=\"Musical\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={mystery} onChange={() => setMystery(!mystery)} name=\"mystery\" />}\r\n        label=\"Mystery\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={romance} onChange={() => setRomance(!romance)} name=\"romance\" />}\r\n        label=\"Romance\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={sciFi} onChange={() => setSciFi(!sciFi)} name=\"sciFi\" />}\r\n        label=\"Sci-Fi\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={thriller} onChange={() => setThriller(!thriller)} name=\"thriller\" />}\r\n        label=\"Thriller\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={war} onChange={() => setWar(!war)} name=\"war\" />}\r\n        label=\"War\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox checked={western} onChange={() => setWestern(!western)} name=\"western\" />}\r\n        label=\"Western\"\r\n      />\r\n    </FormGroup>\r\n    <Button\r\n      type=\"submit\"\r\n      fullWidth\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={e => {\r\n        e.preventDefault();\r\n        setGenres();\r\n      }}\r\n    >\r\n      Submit\r\n    </Button>\r\n  </div>\r\n    \r\n  )\r\n}","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/SavedMovies.js",["87","88","89"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MovieCard from './MovieCard'\r\n\r\nconst useStateWithSessionStorage = (key) => {\r\n  const [data, setData] = useState(sessionStorage.getItem(key) || \"\");\r\n  return [data, setData]\r\n}\r\n\r\nexport default function SavedMovies() {\r\n\r\n  const [token, setToken] = useState(sessionStorage.getItem(\"token\") || \"\");\r\n\r\n  const [movies, setMovies] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    async function getSavedMovies() {\r\n      const data = {\r\n        token: token,\r\n      };\r\n      const configs = {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        body: JSON.stringify(data),\r\n        headers: {\"Content-Type\": \"application/json\"}\r\n      };\r\n      const response_package = await fetch(\"http://localhost:8000/api/get_saved_movies/\", configs);\r\n      const response = await response_package.json();\r\n      let moviesUnJSON = []\r\n      if (response.connected) moviesUnJSON = response.movies\r\n      else getSavedMovies();\r\n\r\n      for (let i = 0; i < moviesUnJSON.length; i++) {\r\n        // console.log(moviesUnJSON[i][0])\r\n        moviesUnJSON[i] = moviesUnJSON[i][0]\r\n      }\r\n      setMovies(moviesUnJSON);\r\n    }\r\n    getSavedMovies()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3}>\r\n      {movies.map(movie => { \r\n        return (\r\n          <Grid item xs={4}>\r\n            <MovieCard \r\n              token={token} \r\n              title={movie['title']['title']}\r\n              unformattedTitle={movie['unformattedTitle']}\r\n              imageURL={movie['title']['image']['url']}\r\n            />\r\n          </Grid>)\r\n      })}\r\n      </Grid>\r\n    </div>\r\n  )\r\n}","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/MovieCard.js",["90"],"import React, { useState, useEffect } from 'react';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport \"./styles.css\"\r\n\r\nexport default function MovieCard({token, title, unformattedTitle, imageURL}) {\r\n\r\n  const [rating, setRating] = useState(null);\r\n  const [show, setShow] = useState(true);\r\n\r\n  const addRating = async () => {\r\n    console.log(\"Enter addRating\");\r\n    if (rating !== null) {\r\n      let ratingSent = false;\r\n\r\n      while (!ratingSent) {\r\n        const data = {\r\n          token: token,\r\n          movieTitle: unformattedTitle,\r\n          rating: rating,\r\n          timestamp: Math.round((new Date()).getTime() / 1000)\r\n        };\r\n        const configs = {\r\n          method: \"POST\",\r\n          mode: \"cors\",\r\n          body: JSON.stringify(data),\r\n          headers: {\"Content-Type\": \"application/json\"}\r\n        };\r\n        //console.log(\"dispatch fetch\")\r\n        const response_package = await fetch(\"http://localhost:8000/api/unsave_movie/\", configs);\r\n        const response = await response_package.json();\r\n        //console.log(\"\\n\\n\\nResponse\\n\\n\\n\", response)\r\n        if (response.connected && response.rated) {\r\n          ratingSent = true;\r\n          setShow(false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      { show && <div>\r\n        <h2>{title}</h2>\r\n        <img \r\n          src={imageURL}\r\n          alt={title}\r\n          className=\"photo\"\r\n        />\r\n        <Box key={title} component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n          <Rating name=\"customized-10\" precision={0.5} max={10} \r\n          value={rating || 2}\r\n          onChange={(event, newValue) => {setRating(newValue)}\r\n          }/>\r\n        </Box>\r\n        <button onClick={e => {\r\n          addRating();\r\n        }}>Add Rating</button>\r\n      </div>\r\n    }\r\n    </div>\r\n  );\r\n}","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/RatedMovies.js",["91","92","93"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MovieCard from './MovieCard_Rated'\r\n\r\nconst useStateWithSessionStorage = (key) => {\r\n  const [data, setData] = useState(sessionStorage.getItem(key) || \"\");\r\n  return [data, setData]\r\n}\r\n\r\nexport default function SavedMovies() {\r\n\r\n  const [token, setToken] = useState(sessionStorage.getItem(\"token\") || \"\");\r\n\r\n  const [movies, setMovies] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    async function getRatedMovies() {\r\n      const data = {\r\n        token: token,\r\n      };\r\n      const configs = {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        body: JSON.stringify(data),\r\n        headers: {\"Content-Type\": \"application/json\"}\r\n      };\r\n      const response_package = await fetch(\"http://localhost:8000/api/view_rated/\", configs);\r\n      const response = await response_package.json();\r\n      if (response.connected) setMovies(response.data);\r\n      else getRatedMovies();\r\n    }\r\n    getRatedMovies()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3}>\r\n      {movies.map(movie => { \r\n        return (\r\n          <Grid item xs={4}>\r\n            <MovieCard \r\n              token={token} \r\n              title={movie['title']}\r\n              imageURL={movie['imageURL']}\r\n              rating={movie['rating']}\r\n            />\r\n          </Grid>)\r\n      })}\r\n      </Grid>\r\n    </div>\r\n  )\r\n}","/mnt/c/Users/Phillip/Desktop/personal projects/recommendations_system/frontend/src/components/MovieCard_Rated.js",["94","95"],"import React, { useState, useEffect } from 'react';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport \"./styles.css\"\r\n\r\nexport default function MovieCard({title, imageURL, rating}) {\r\n  \r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      <img \r\n        src={imageURL}\r\n        alt={title}\r\n        className=\"photo\"\r\n      />\r\n      <Box key={title} component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n        <Rating name=\"customized-10\" precision={0.5} max={10} value={rating} readOnly/>\r\n      </Box>\r\n    </div>\r\n  );\r\n}",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":6,"column":7,"nodeType":"102","messageId":"103","endLine":6,"endColumn":16},{"ruleId":"100","severity":1,"message":"104","line":53,"column":17,"nodeType":"102","messageId":"103","endLine":53,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":75,"column":6,"nodeType":"107","endLine":75,"endColumn":8,"suggestions":"108"},{"ruleId":"105","severity":1,"message":"106","line":34,"column":6,"nodeType":"107","endLine":34,"endColumn":8,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"104","line":57,"column":17,"nodeType":"102","messageId":"103","endLine":57,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":60,"column":17,"nodeType":"102","messageId":"103","endLine":60,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":82,"column":6,"nodeType":"107","endLine":82,"endColumn":8,"suggestions":"110"},{"ruleId":"100","severity":1,"message":"111","line":1,"column":27,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"112","line":2,"column":8,"nodeType":"102","messageId":"103","endLine":2,"endColumn":17},{"ruleId":"100","severity":1,"message":"113","line":3,"column":10,"nodeType":"102","messageId":"103","endLine":3,"endColumn":20},{"ruleId":"100","severity":1,"message":"114","line":7,"column":7,"nodeType":"102","messageId":"103","endLine":7,"endColumn":33},{"ruleId":"100","severity":1,"message":"104","line":14,"column":17,"nodeType":"102","messageId":"103","endLine":14,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":118,"column":45,"nodeType":"117","messageId":"118","endLine":118,"endColumn":47},{"ruleId":"115","severity":1,"message":"116","line":137,"column":31,"nodeType":"117","messageId":"118","endLine":137,"endColumn":33},{"ruleId":"105","severity":1,"message":"106","line":34,"column":6,"nodeType":"107","endLine":34,"endColumn":8,"suggestions":"119"},{"ruleId":"100","severity":1,"message":"104","line":57,"column":17,"nodeType":"102","messageId":"103","endLine":57,"endColumn":25},{"ruleId":"100","severity":1,"message":"114","line":5,"column":7,"nodeType":"102","messageId":"103","endLine":5,"endColumn":33},{"ruleId":"100","severity":1,"message":"104","line":12,"column":17,"nodeType":"102","messageId":"103","endLine":12,"endColumn":25},{"ruleId":"105","severity":1,"message":"120","line":40,"column":6,"nodeType":"107","endLine":40,"endColumn":8,"suggestions":"121"},{"ruleId":"100","severity":1,"message":"111","line":1,"column":27,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"114","line":5,"column":7,"nodeType":"102","messageId":"103","endLine":5,"endColumn":33},{"ruleId":"100","severity":1,"message":"104","line":12,"column":17,"nodeType":"102","messageId":"103","endLine":12,"endColumn":25},{"ruleId":"105","severity":1,"message":"120","line":33,"column":6,"nodeType":"107","endLine":33,"endColumn":8,"suggestions":"122"},{"ruleId":"100","severity":1,"message":"123","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"111","line":1,"column":27,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","'setToken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["126"],["127"],["128"],"'useEffect' is defined but never used.","'PropTypes' is defined but never used.","'withStyles' is defined but never used.","'useStateWithSessionStorage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["129"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["130"],["131"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"132","fix":"134"},{"desc":"132","fix":"135"},{"desc":"132","fix":"136"},{"desc":"137","fix":"138"},{"desc":"137","fix":"139"},"Update the dependencies array to be: [history, token]",{"range":"140","text":"141"},{"range":"142","text":"141"},{"range":"143","text":"141"},{"range":"144","text":"141"},"Update the dependencies array to be: [token]",{"range":"145","text":"146"},{"range":"147","text":"146"},[2550,2552],"[history, token]",[1189,1191],[2848,2850],[1197,1199],[1246,1248],"[token]",[1024,1026]]